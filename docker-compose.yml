
services:
  db:
    image: bitnami/postgresql:15
    ports:
      - "5432:5432"
    environment:
      POSTGRESQL_PASSWORD: my_pass
      POSTGRESQL_DATABASE: cinema_service
      POSTGRESQL_USERNAME: my_service
    volumes:
      - ./db/:/docker-entrypoint-initdb.d/
      - data-db:/bitnami/postgresql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U my_service -d cinema_service" ]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-network

  swagger:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger-ui
    ports:
      - "8083:8080"
    environment:
      - URL=http://localhost:8080/v3/api-docs.yaml
    volumes:
      - ./api-docs.yaml:/usr/share/nginx/html/v3/api-docs.yaml
    networks:
      - app-network

  jenkins:
    image: jenkins/jenkins:lts-jdk17
    user: root
    ports:
      - "8082:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    environment:
      - JENKINS_OPTS=--argumentsRealm.passwd.admin=admin --argumentsRealm.roles.admin=admin
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true
      - DOCKER_HOST=unix:///var/run/docker.sock
      - JENKINS_ADMIN_ID=admin
      - JENKINS_ADMIN_PASSWORD=admin
      - JENKINS_ADMIN_EMAIL=admin@example.com
    restart: unless-stopped
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - service-practice
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - app-network

  service-practice:
    image: service:1
    ports:
      - "8080:8080"
    volumes:
      - ./configuration:/app/config
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  kafka_data:
  zookeeper_data:
  data-db:
  jenkins_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
    attachable: true